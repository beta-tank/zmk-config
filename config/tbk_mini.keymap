/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "custom-behaviors.dtsi"
#include "custom-macros.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ENG 0
#define RUS 1
#define LWR 2
#define RSE 3
#define ADJ 4
#define GAME 5

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ { 
        behaviors {
                HOLD_COMBO_BEHAVIOR(htlwr_rus, <&m_lwr_rus>) // macro_lwr_rus on hold and kp on tap
                htb: hold-tap-balanced {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_TAP_BALANCED";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                    };
        };
        macros {
                SWITCH_LANG_AND_MO_LAYER_MACRO(lwr_rus, LWR, ENG_NUM, SECOND_NUM)
                SWITCH_LANG_AND_TO_LAYER_MACRO(tom_rus, RUS, SECOND_NUM)
                SWITCH_LANG_AND_TO_LAYER_MACRO(tom_eng, ENG, ENG_NUM)
                SWITCH_LANG_AND_KP_MACRO(kp_number, HASH, SECOND_NUM, ENG_NUM)
        };
        combos {
                compatible = "zmk,combos";
                combo_eng_rus {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <24 37>;
                        layers = <ENG>, <RUS>;
                        bindings = <&m_tom_rus>;
                    };
                combo_rus_eng {
                        timeout-ms = <COMBO_TIMEOUT>;
                        // key-positions = <29 37>; // left half test positions
                        key-positions = <35 40>; // right half
                        layers = <ENG>, <RUS>;
                        bindings = <&m_tom_eng>;
                    };
        };
        keymap {
                compatible = "zmk,keymap";

                eng_layer {
// -----------------------------------------------------------------------------------------
// |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  \   |
//                    | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                        bindings = <
    &htb LWIN GRAVE  &kp Q &kp W &kp E &kp R &kp T         &kp Y &kp U  &kp I     &kp O   &kp P    &htb RWIN LBKT
    &mt  LCTRL RBKT  &kp A &kp S &kp D &kp F &kp G         &kp H &kp J  &kp K     &kp L   &kp SEMI &htb RCTRL SQT
    &mt  LALT UNDER  &kp Z &kp X &kp C &kp V &kp B         &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt  RALT BSLH
           &lt RSE ESC &mt LSHFT SPACE &lt LWR TAB         &lt LWR RET &kp BSPC &lt RSE DEL
                        >;
                };
                rus_layer {
// -----------------------------------------------------------------------------------------
// |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \ |
//                    | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                        bindings = <
    &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans
             &trans &trans &b_htlwr_rus 0 TAB         &trans &trans &trans
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10  | F11 |
// |  #  |  (  |  =  |  !  |  -  |  |  |   |  &  |  ?  |  "  |  :  |  )   |  $  |
// |  +  |     |     |     |  @  |  RD |   |  RD |     |     |SHIFT|SCREEN|  ^  |
//                   | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                       bindings = <
           &kp F1         &kp F2    &kp F3    &kp F4      &kp F5    &kp F6               &kp F7        &kp F8       &kp F9      &kp F10      &kp F11       &kp F12
   &mt LCTRL HASH &kp LPAR  &kp EQUAL &kp EXCL    &kp MINUS &kp LS(BSLH)         &kp AMPS      &kp LS(FSLH) &kp LS(SQT) &kp LS(SEMI) &kp RPAR      &kp DLLR
   &kp LALT       &kp LC(Z) &kp LC(X) &kp LC(C)   &kp AT    &kp LC(LS(LA(B)))    &kp LC(LS(B)) &kp PRCNT    &trans      &kp LSHFT    &kp LG(LS(S)) &kp CARET
                                      &lt ADJ ESC &trans    &trans               &trans        &trans       &lt ADJ DEL
                       >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// | NMLK |  *  |  4  |  5  |  6  |  -  |   | VOLU| HOME| UP  | PGUP |MYCOMP| NEXT |     |
// |   =  |  0  |  1  |  2  |  3  |  +  |   |PAUSE| LEFT| DOWN| RGHT | APP  | CAPS |
// |      |  /  |  7  |  8  |  9  |  .  |   | VOLD| END | PRSC| PGDN | CALC | PREV |
//                    |     |     | ADJ |   | ADJ |     |     |
                        bindings = <       
   &kp LWIN       &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_MINUS        &kp C_VOL_UP &kp HOME &kp UP    &kp PG_UP &kp C_AL_MY_COMPUTER &kp C_NEXT
   &kp LCTRL      &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_PLUS         &kp C_PP     &kp LEFT &kp DOWN  &kp RIGHT &kp K_APP            &kp CAPS
   &mt LALT EQUAL &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DOT          &kp C_VOL_DN &kp END  &kp PSCRN &kp PG_DN &kp C_AL_CALC        &kp C_PREV
                                             &trans    &trans    &lt ADJ TAB         &lt ADJ RET  &trans   &trans
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | BLDR |     |     | USB | BLE |     |   |     | BLE | USB |     |     | BLDR |
// |      | BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 |      |
// | BTCLR|     |     |     |     |     |   |     |     |     |     |     | BTCLR|
//                    |     |     |     |   |     |     |     |
                        bindings = <              
   &bootloader  &none        &none        &out OUT_USB &out OUT_BLE &kp KP_NUM         &kp KP_NUM   &out OUT_BLE &out OUT_USB &none        &none         &bootloader
   &none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &none
   &bt BT_CLR   &none        &none        &none        &none        &tog GAME          &none        &none        &none        &none        &none         &bt BT_CLR
                                          &trans       &none        &trans             &trans       &none        &trans
                        >;
                };
                game_layer {

                        bindings = <
   &kp LALT  &kp ESC   &kp Q &kp W &kp E &kp R         &kp T &kp Y &kp U  &kp I     &kp O   &kp P  
   &kp TAB   &kp LSHFT &kp A &kp S &kp D &kp F         &kp G &kp H &kp J  &kp K     &kp L   &kp C_VOL_UP
   &tog GAME &kp LCTRL &kp Z &kp X &kp C &kp V         &kp B &kp N &kp M  &kp COMMA &kp F12 &kp C_VOL_DN
                     &kp LCTRL &kp SPACE &kp Q         &lt LWR RET &kp LWIN &lt RSE DEL
                        >;
                };
        };
};
