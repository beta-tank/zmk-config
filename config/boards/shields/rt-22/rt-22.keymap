/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define GAME 4

/* Macro macro: */
#define str(s) #s
#define MACRO(NAME, BINDINGS, WAITMS, TAPMS) \
  macro_##NAME: macro_##NAME { \
      compatible = "zmk,behavior-macro"; \
      label = str(macro_##NAME); \
      #binding-cells = <0>; \
      wait-ms = <WAITMS>; \
      tap-ms = <TAPMS>; \
      bindings = <BINDINGS>; \
  };

// #define MYMACRO(NAME, LAYER, NUM) \
//   macro_##NAME: macro_##NAME { \
//       compatible = "zmk,behavior-macro"; \
//       label = str(macro_##NAME); \
//       #binding-cells = <0>; \
//       wait-ms = <0>; \
//       tap-ms = <20>; \
//       bindings \
//         = <&macro_tap &kp LS(LC(NUM)) \
//         , <&macro_press &mo LAYER \
//         , <&macro_pause_for_release \
//         , <&macro_release &mo LAYER \
//         ; \
//   };

/* macro: */

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
        behaviors {
                rulang: russian_language {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_LANG";
                #binding-cells = <0>;
                bindings = <&kp LALT>, <&kp LC(N1)>;
                mods = <(LSHIFT|RSHIFT)>;
                keep-mods = <(LSHIFT|RSHIFT)>;
                };
                mht: macros_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MACROS_HOLD_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&macro_nav>, <&kp>;
                        quick_tap_ms = <200>;
                    };
        };
        macros {
                macro_nav: macro_nav { 
                        compatible = "zmk,behavior-macro"; 
                        label = "macro_nav"; 
                        #binding-cells = <0>; 
                        wait-ms = <0>; 
                        tap-ms = <20>; 
                        bindings 
                                = <&macro_tap &kp LS(LC(N2))>
                                , <&macro_press &mo LWR>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo LWR>
                                ;
                    };
                    macro_ru: macro_ru { 
                        compatible = "zmk,behavior-macro"; 
                        label = "macro_ru"; 
                        #binding-cells = <0>; 
                        wait-ms = <0>; 
                        tap-ms = <20>; 
                        bindings 
                                = <&macro_tap &kp LS(LC(N1))>
                                , <&macro_press &mo LWR>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo LWR>
                                ;
                    };
                //     MYMACRO(one, 1, N1)
                // MACRO(nav, &macro_tap &kp LC(LS(N2)) &mo LWR &macro_pause_for_release &macro_release &mo LWR, 0, 10)
        };
        combos {
                compatible = "zmk,combos";
                combo_eng {
                    timeout-ms = <200>;
                    key-positions = <37 42>;
                    layers = <DEF>;
                    bindings = <&kp LC(LS(N2))>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |  ]  |
//        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
//        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \ |
//                    | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                        bindings = <
   &kp LWIN &kp GRAVE &kp Q &kp W &kp E &kp R &kp T         &kp Y &kp U  &kp I     &kp O   &kp P    &kp LBKT  &kp RBKT
            &kp LCTRL &kp A &kp S &kp D &macro_ru &mht 0 G         &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
            &rulang   &kp Z &kp X &kp C &kp V &kp B         &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
            &lt RSE ESC &mt LSHFT SPACE &lt LWR TAB         &lt LWR RET &kp BSPC &lt RSE DEL
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10  | F11 | F12 |
//       |  =  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )   |  -  |
//       |  +  |     |     |     |     |  RD |   |  RD |SHIFT|     |     |SCREEN|     |
//                   | GUI |     | SPC |         | ENT |     | ALT |
                       bindings = <
   &trans &kp UNDER       &kp F1    &kp F2    &kp F3      &kp F4    &kp F5               &kp F6        &kp F7    &kp F8   &kp F9   &kp F10       &kp F11   &mt RGUI F12
          &mt LCTRL EQUAL &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp PRCNT            &kp CARET     &kp AMPS  &kp STAR &kp LPAR &kp RPAR      &kp MINUS
          &mt LALT PLUS   &kp LC(Z) &kp LC(X) &kp LC(C)   &kp LC(V) &kp LC(LS(LA(B)))    &kp LC(LS(B)) &kp LSHFT &kp N8   &kp N9   &kp LG(LS(S)) &trans
                                              &lt ADJ ESC &trans    &trans               &trans        &trans    &lt ADJ DEL
                       >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// |     | NMLK |  *  |  4  |  5  |  6  |  -  |   | VOLU| HOME| UP  | PGUP |MYCOMP| NEXT |     |
//       |   =  |  0  |  1  |  2  |  3  |  +  |   |PAUSE| LEFT| DOWN| RGHT | APP  | CAPS |
//       |      |  /  |  7  |  8  |  9  |  .  |   | VOLD| END | PRSC| PGDN | CALC | PREV |
//                          |     |     | ADJ |   | ADJ |     |     |
                        bindings = <       
   &trans &kp KP_NUM      &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_MINUS        &kp C_VOL_UP &kp HOME &kp UP    &kp PG_UP &kp C_AL_MY_COMPUTER &kp C_NEXT &trans
          &mt LCTRL EQUAL &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_PLUS         &kp C_PP     &kp LEFT &kp DOWN  &kp RIGHT &kp K_APP            &kp CAPS
          &trans          &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DOT          &kp C_VOL_DN &kp END  &kp PSCRN &kp PG_DN &kp C_AL_CALC        &kp C_PREV
                                                    &trans    &trans    &lt ADJ TAB         &lt ADJ RET  &trans   &trans
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     | USB | BLE |     |   |     | BLE | USB |     |     | BLDR | RST |
//       |      | BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 |      |
//       | BTCLR|     |     |     |     |     |   |     |     |     |     |     | BTCLR|
//                          |     |     |     |   |     |     |     |
                        bindings = <              
   &sys_reset &bootloader  &none        &none        &out OUT_USB &out OUT_BLE &none           &none        &out OUT_BLE &out OUT_USB &none        &none         &bootloader &sys_reset
          &none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &none
          &bt BT_CLR   &none        &none        &none        &none        &tog GAME       &none        &none        &none        &none        &none         &bt BT_CLR
                                                 &trans       &none        &trans          &trans       &none        &trans
                        >;
                };
                game_layer {
// -----------------------------------------------------------------------------------------
// |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |  ]  |
//        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
//        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \ |
//                    | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                        bindings = <
   &kp ESC  &kp LALT  &kp LCTRL &kp Q &kp W &kp E &kp R         &kp Y &kp U  &kp I     &kp O   &kp P    &kp LBKT  &kp RBKT
            &kp TAB   &kp LSHFT &kp A &kp S &kp D &kp F         &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
            &tog GAME &kp LCTRL &kp Z &kp X &kp C &kp H         &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                              &kp LCTRL &kp SPACE &kp Q         &lt LWR RET &kp BSPC &lt RSE DEL
                        >;
                };
        };
};